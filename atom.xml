<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guido van zijef</title>
  <icon>https://www.gravatar.com/avatar/67f3908a37d2017807d6ea4cf98be84e</icon>
  <subtitle>千里之堤，溃于蚁穴。剑锋所指，锋芒毕露。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guidozijef.github.io/"/>
  <updated>2018-10-18T10:29:46.869Z</updated>
  <id>https://guidozijef.github.io/</id>
  
  <author>
    <name>Guido van zijef</name>
    <email>913497146@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>打造自己的音乐播放器（二）</title>
    <link href="https://guidozijef.github.io/2018/10/16/%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://guidozijef.github.io/2018/10/16/打造自己的音乐播放器（二）/</id>
    <published>2018-10-16T14:37:07.770Z</published>
    <updated>2018-10-18T10:29:46.869Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>&ensp;&ensp;&ensp;&ensp;上一篇讲到了<code>&lt;audio&gt;</code>标签的一些属性和事件，下面我们就看看如何利用这些属性来实现我们自己的播放器，这里需要对前端知识有一定了解。</p><hr><center><h2>打造自己的音乐播放器（二）</h2></center><h4 id="一、播放器界面的实现"><a href="#一、播放器界面的实现" class="headerlink" title="一、播放器界面的实现"></a>一、播放器界面的实现</h4><p>&ensp;&ensp;&ensp;&ensp;这里就利用html、css写一个前端的音乐播放界面就好了，这个没什么好说的，每个人都可以写自己喜欢的风格，根据自己的喜好来，写自己风格的播放器，这里我把自己的代码和效果放上来。</p><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;referrer&quot; content=&quot;never&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;http://o7m41tvmg.bkt.clouddn.com/jquery-1.12.4.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/jquery-ui.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/music.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/music.css&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;music_player&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;img/music.png&quot;&gt;&lt;/a&gt;</span><br><span class="line">            &lt;span&gt;听风画雨眠&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        // 播放器面板</span><br><span class="line">        &lt;div class=&quot;icon&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;img/after.png&quot;&gt;&lt;/a&gt;&amp;ensp;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;img/player.png&quot;&gt;&lt;/a&gt;&amp;ensp;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;img/betton.png&quot;&gt;&lt;/a&gt;&amp;ensp;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;&lt;img src=&quot;img/sound.png&quot;&gt;&lt;/a&gt;</span><br><span class="line">            &lt;div class=&quot;strip&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;circle&quot;&gt;</span><br><span class="line">                &lt;span&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;bar&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;img id=&quot;img&quot; style=&quot;width:70px;&quot;</span><br><span class="line">         src=&quot;http://qukufile2.qianqian.com/data2/pic/0ce88c8cd9127e20ff576a6ad66fe870/576822355/576822355.jpg@s_1,w_90,h_90&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; value=&quot;&quot; id=&quot;info&quot; placeholder=&quot;请输入歌曲、歌手&quot; /&gt;</span><br><span class="line">        &lt;button id=&quot;btn&quot;&gt;搜索&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;audio id=&quot;audio&quot; preload=&quot;auto&quot; style=&quot;width:274px;&quot; src=&quot;http://music.163.com/song/media/outer/url?id=449818741.mp3&quot;&gt;浏览器太垃圾不支持h5音乐标签&lt;/audio&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        // 播放列表</span><br><span class="line">        &lt;ul class=&quot;list&quot; style=&quot;width:260px; heigth:30px;&quot;&gt;</span><br><span class="line">            &lt;li&gt;&lt;span&gt;&lt;/span&gt;&lt;a class=&quot;li&quot; href=&quot;javascript:;&quot;&gt;光年之外&lt;/a&gt;&lt;div&gt;邓紫棋&lt;/div&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;span&gt;&lt;/span&gt;&lt;a class=&quot;li&quot; href=&quot;javascript:;&quot;&gt;半壶纱&lt;/a&gt;&lt;div&gt;刘珂矣&lt;/div&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>css部分我就不发出来了，代码太长了，需要整套源码的可以去群里面下载（Q群：812307816）</p></blockquote><p>我们直接到最关键的部分，js部分</p><h4 id="二、js功能实现"><a href="#二、js功能实现" class="headerlink" title="二、js功能实现"></a>二、js功能实现</h4><h5 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h5><p>&ensp;&ensp;&ensp;&ensp;js部分是里面最重要的部分，做了上面的html、css后只是一个音乐播放器的壳子，js才是整个播放器的核心内容，我们先来屡屡思路</p><blockquote><p>1、如何做到搜索取别的播放器数据的效果。<br><br>2、得到数据后我们如何把歌曲信息显示到播放列表上面。<br><br>3、如何点击列表上面不同的歌曲自动获取该播放地址和图片。<br><br>4、如何实现本地的点击功能（控制、暂停、静音、上一曲、下一曲）。</p></blockquote><p>要实现索取别的播放器的音乐，我们需要用到AJAX发送跨域请求，首先需要找到一个音乐API，很多音乐播放器都是不可行的。而且我用的是jquery的ajax，只支持get请求方式的跨域。最后我也找到了一个，各种尝试最后请求成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#btn&apos;).click(function() &#123;</span><br><span class="line">var value = $(&apos;#info&apos;).val();</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type: &apos;get&apos;,</span><br><span class="line">url: &apos;http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=&apos; + value,</span><br><span class="line">async: true,</span><br><span class="line">dataType: &apos;jsonp&apos;,</span><br><span class="line">success: function(data1) &#123;</span><br><span class="line">var songids = data1.song;</span><br><span class="line">console.log(songids.length);</span><br></pre></td></tr></table></figure></p><blockquote><p>这部分代码就是实现发送搜索歌曲的请求，并返回搜索信息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; songids.length; i++) &#123;</span><br><span class="line">var songid = songids[i].songid;</span><br><span class="line">var artistname = songids[i].artistname;</span><br><span class="line">var li = document.createElement(&apos;li&apos;);</span><br><span class="line">var span = document.createElement(&apos;span&apos;);</span><br><span class="line">var a = document.createElement(&apos;a&apos;);</span><br><span class="line">var div = document.createElement(&apos;div&apos;);</span><br><span class="line">div.innerText = artistname;</span><br><span class="line">a.href = &apos;javascript:;&apos;;</span><br><span class="line">a.src = songid;</span><br><span class="line">var songname = songids[i].songname;</span><br><span class="line">a.textContent = songname;</span><br><span class="line">li.appendChild(span);</span><br><span class="line">li.appendChild(a);</span><br><span class="line">li.appendChild(div);</span><br><span class="line">$(&apos;.music_player .list&apos;).append(li);</span><br></pre></td></tr></table></figure><blockquote><p>利用js将得到的歌曲信息显示到歌曲列表中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">type: &apos;get&apos;,</span><br><span class="line">url:&apos;http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.song.play&amp;songid=&apos; +this.src,</span><br><span class="line">async: true,</span><br><span class="line">dataType: &apos;jsonp&apos;,</span><br><span class="line">success: function(data2) &#123;</span><br><span class="line">var audio = document.getElementById(&apos;audio&apos;);</span><br><span class="line">var img = document.getElementById(&apos;img&apos;);</span><br><span class="line">audio.src = data2.bitrate.file_link;</span><br><span class="line">img.src = data2.songinfo.pic_small;</span><br></pre></td></tr></table></figure><blockquote><p>这部分代码是对单个歌曲发送请求，得到本歌曲的相关信息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 点击图片控制播放和暂停</span><br><span class="line">$(&apos;.icon a img&apos;).eq(1).click(function() &#123;</span><br><span class="line">if (audio.paused) &#123;</span><br><span class="line">audio.play();</span><br><span class="line">$(this).attr(&#123; src: &apos;img/pause.png&apos; &#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">audio.pause();</span><br><span class="line">$(this).attr(&#123; src: &apos;img/player.png&apos; &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 点击音量变成静音并且改变图标</span><br><span class="line">$(&apos;.icon a img&apos;).eq(3).click(function() &#123;</span><br><span class="line">if (audio.muted) &#123;</span><br><span class="line">audio.muted = false;</span><br><span class="line">$(this).attr(&#123; src: &apos;img/sound.png&apos; &#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">audio.muted = true;</span><br><span class="line">$(this).attr(&#123; src: &apos;img/sound-off.png&apos; &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 点击上一歌曲</span><br><span class="line">$(&apos;.icon a img&apos;).eq(0).click(function() &#123;</span><br><span class="line">$(&apos;.list .present&apos;).parent().prev(&apos;li&apos;).children(&apos;span&apos;).addClass(&apos;present&apos;);</span><br><span class="line">$(&apos;.list .present&apos;).parent().prev(&apos;li&apos;).children(&apos;a&apos;).click();</span><br><span class="line">&#125;);</span><br><span class="line">// 点击下一歌曲</span><br><span class="line">$(&apos;.icon a img&apos;).eq(2).click(function() &#123;</span><br><span class="line">$(&apos;.list .present&apos;).parent().next(&apos;li:first&apos;).children(&apos;span&apos;).addClass(&apos;present&apos;);</span><br><span class="line">$(&apos;.list .present&apos;).parent().next(&apos;li:first&apos;).children(&apos;a&apos;).click();</span><br><span class="line">&#125;);</span><br><span class="line">// 控制音量</span><br><span class="line">$(&apos;.icon .circle span&apos;).draggable(&#123;</span><br><span class="line">axis: &apos;X&apos;,</span><br><span class="line">containment: &apos;parent&apos;,</span><br><span class="line">drag: function(ev, ui) &#123;</span><br><span class="line">// console.log(ui.position.left)</span><br><span class="line">var noeleft = ui.position.left;</span><br><span class="line">$(&apos;.icon .bar&apos;).css(&#123; width: noeleft + 2 &#125;);</span><br><span class="line">audio.volume = noeleft / 40; // 利用left转化为音量。</span><br><span class="line">if (noeleft == 0) &#123;</span><br><span class="line">$(&apos;.icon a img&apos;).eq(3).attr(&#123; src: &apos;img/sound-off.png&apos; &#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$(&apos;.icon a img&apos;).eq(3).attr(&#123; src: &apos;img/sound.png&apos; &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 自动播放下一首</span><br><span class="line">if (audio) &#123;</span><br><span class="line">audio.loop = false;</span><br><span class="line">audio.addEventListener(</span><br><span class="line">&apos;ended&apos;,</span><br><span class="line">function() &#123;</span><br><span class="line">$(&apos;.icon a img&apos;).eq(2).click();</span><br><span class="line">//在这个方法里写相应的逻辑就可以了</span><br><span class="line">&#125;,</span><br><span class="line">false</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这部分就是控制歌曲的播放、暂停、上一曲、下一曲等功能了。</p></blockquote><p>最后我自己做的效果如下<a href="http://zijef.pw/" target="_blank" rel="noopener">demo</a>（demo要用电脑端查看才会有）：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-e52da417bd614419.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>我这里没做进度条和歌词效果，感兴趣的可以自己加进去，进度条的做法应该跟音量控制大同小异，需要用到jquery-ui。对了，给大家推荐一个图标下载的地方，是你马云爸爸家的<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a>，我上面用到的图标也是在上面下载的。</p><p>好了，播放器打造完成了，今天除了皮，又啥也没干。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;上一篇讲到了&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;标签的一些属性和事件，下面我
      
    
    </summary>
    
    
      <category term="前端" scheme="https://guidozijef.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="audio" scheme="https://guidozijef.github.io/tags/audio/"/>
    
      <category term="javascript" scheme="https://guidozijef.github.io/tags/javascript/"/>
    
      <category term="css" scheme="https://guidozijef.github.io/tags/css/"/>
    
      <category term="html" scheme="https://guidozijef.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>打造自己的音乐播放器（一）</title>
    <link href="https://guidozijef.github.io/2018/10/16/%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://guidozijef.github.io/2018/10/16/打造自己的音乐播放器（一）/</id>
    <published>2018-10-16T14:36:47.873Z</published>
    <updated>2018-10-18T10:28:40.379Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>&ensp;&ensp;&ensp;&ensp;自从学习了前端就一直在想，能不能利用别人的数据打造一个我自己的音乐播放器，最开始这个想法是想做一个简单的翻译软件，后来用网易云音乐外链，没有搜索功能实在是很不爽，就冒出了这个想法， 查了一下，网上也有做自己的播放器，但是没发现有搜索功能的，只是本地，后来就坚持自己做一个带搜索的音乐播放器。</p><hr><center><h2>打造自己的音乐播放器（一）</h2></center><h4 id="一、-初识-lt-audio-gt-标签"><a href="#一、-初识-lt-audio-gt-标签" class="headerlink" title="一、 初识&lt;audio&gt;标签"></a>一、 初识<code>&lt;audio&gt;</code>标签</h4><p>&ensp;&ensp;&ensp;&ensp;在打造自己的音乐播放器之前我们先认识一下<code>&lt;audio&gt;</code>标签,毕竟后面的操作都是与这个标签挂钩，<code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>标签是H5新增标签，这里我们用<code>&lt;audio&gt;</code>标签。<br>&ensp;&ensp;&ensp;&ensp;我们先看一下<code>&lt;audio&gt;</code>标签有哪些属性和事件，我在网上找了几张图，一目了然。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/14214683-d843ef751e355393.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="](http://upload-images.jianshu.io/upload_images/14214683-ad580724dda135fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![" title="">                </div>                <div class="image-caption">](http://upload-images.jianshu.io/upload_images/14214683-ad580724dda135fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/14214683-6304633d49a3fae2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="](http://upload-images.jianshu.io/upload_images/14214683-c7f07be8ac2dd3f1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![" title="">                </div>                <div class="image-caption">](http://upload-images.jianshu.io/upload_images/14214683-c7f07be8ac2dd3f1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)![</div>            </figure></p><h4 id="二、属性解析"><a href="#二、属性解析" class="headerlink" title="二、属性解析"></a>二、属性解析</h4><p>&ensp;&ensp;&ensp;&ensp;这里我挑一些常用的给大家简单说下如何使用这些属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=&quot;音乐链接.mp3&quot; controls&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure></p><p>这就是<code>&lt;audio&gt;</code>的基本使用，如果在页面上写这一行代码就会看到播放器，但是这里显示的播放器，会根据不同的浏览器显示也是各不相同， 显示的效果也不是我们所要的，所以这里我们把<code>controls</code>属性去掉，播放器就是隐藏起来，然后自己写界面。</p><blockquote><p><strong>注</strong>：主流的音频文件格式有：mp3、wav、ogg。不同的浏览器对三种格式支持程度不一样。其中mp3格式支持度最好。</p></blockquote><p><strong>autoplay属性</strong>：加载完成后，自动播放。也非常简单、使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=&quot;音乐链接.mp3&quot; autoplay&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure></p><p><strong>loop属性</strong>：顾名思义，循环播放。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=&quot;音乐链接.mp3&quot; loop&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure></p><p><strong>preload属性</strong>：用来控制音频在什么时候进行加载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=&quot;音乐链接.mp3&quot; preload=&quot;auto&quot;&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>对应的值有3种：<br>none：默认不加载，等有需要的时候再加载。<br>metadata：元数据，默认不加载，但是可以提取该音频的元数据信息。<br>auto：自动加载，网页加载完就加载整个音频。</p></blockquote><p><strong>muted属性</strong>：静音效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=&quot;音乐链接.mp3&quot; muted&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>：加了<strong>muted属性</strong>后，音频在播放的时候是没有声音，除非用户手动调整控制面板的音量，一般情况下不加这个。</p></blockquote><p>下面我们介绍下如何用javascrit如何操作这些属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio id=&quot;music&quot; src=&quot;音乐链接.mp3&quot;&gt;&lt;/audio&gt;</span><br><span class="line">    var music = document.getElementById(&apos;music&apos;);</span><br></pre></td></tr></table></figure></p><p>控制播放：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">music.play();//调用play( )方法可以执行播放。</span><br></pre></td></tr></table></figure></p><p>控制暂停：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">music.pause();//调用pause( )方法可以执行暂停播放。</span><br></pre></td></tr></table></figure></p><p>获取和设置已播放的时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">music.currentTime</span><br></pre></td></tr></table></figure></p><blockquote><p>通过currentTime属性，你可以拿到当前音频播放了多久，返回的数字以( s )秒为单位。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">music.currentTime = 10;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>你也可以给它赋值，这样音频会定位到10秒的播放位置。</p></blockquote><p>是否自动播放：</p><pre><code>music.autoplay = true;//自动播放</code></pre><blockquote><p>可以直接在<code>audio</code>标签上加上autoplay属性，也可以通过JavaScript来设置autoplay属性。它是一个布尔值，true代表自动播放，false代表非自动播放。</p></blockquote><p>是否循环播放：</p><pre><code>music.loop = true;//循环播放</code></pre><blockquote><p>可以直接在<code>&lt;audio&gt;</code>标签上加上loop属性，也可以通过JavaScript来设置loop属性。它也是一个布尔值，true代表循环播放，false代表单曲播放。</p></blockquote><p>是否显示控制面板：</p><pre><code>music.controls = true;//显示控制面板</code></pre><blockquote><p>可以直接在<code>audio</code>标签上加上controls属性，也可以通过JavaScript来设置controls属性。它也是一个布尔值，true代表显示控制面板，false代表隐藏控制面板。我们这里就直接隐藏了，显示的也不是我们想要的东西。</p></blockquote><p>是否静音：</p><pre><code>music.muted = true;//静音</code></pre><blockquote><p>可以直接在<code>audio</code>标签上加上muted属性，也可以通过JavaScript来设置muted属性。它也是一个布尔值，true代表静音，false代表有声音。</p></blockquote><p>是否暂停：</p><pre><code>music.paused  //是否暂停 </code></pre><blockquote><p>判断音频当前是否暂停，返回true代表暂停，返回false代表正在播放；默认是true；该值只能读取，不能修改。<br>调用play( )方法后，music.paused的值会变成false；调用pause( )方法后，music.paused的值会变成true。后面我们会用Jquery来控制这两个属性，实现播放和暂停。</p></blockquote><p>调节音量：</p><pre><code>m.volume = 0.1;</code></pre><blockquote><p>音量的取值范围在：0（无声）~1（最大声）之间。后面我们会利用其他数值来转换到volume值上面，来对音量进行控制。</p></blockquote><p>后面我会讲到如何写html、css、javascript代码和功能实现，预知详情，请看下一篇，打造自己的音乐播放器（二）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;自从学习了前端就一直在想，能不能利用别人的数据打造一个我自己的音乐播放器，最开始这个想法是想
      
    
    </summary>
    
    
      <category term="前端" scheme="https://guidozijef.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="audio" scheme="https://guidozijef.github.io/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>python爬取简历模板</title>
    <link href="https://guidozijef.github.io/2018/09/27/python%E7%88%AC%E5%8F%96%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF/"/>
    <id>https://guidozijef.github.io/2018/09/27/python爬取简历模板/</id>
    <published>2018-09-27T07:12:40.625Z</published>
    <updated>2018-09-27T07:40:58.460Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>&ensp;&ensp;&ensp;&ensp;自从学了python爬虫后就想去找一份爬虫的工作，但是简历如何写作是个问题，就想到了何不用爬虫去爬取别人的简历模板一看，找了一些网站最后看最准了<a href="http://sc.chinaz.com/jianli/free_1.html" target="_blank" rel="noopener">站长之家</a>。</p><hr><h2 id="python爬取简历模板"><a href="#python爬取简历模板" class="headerlink" title="python爬取简历模板"></a><center>python爬取简历模板<center></center></center></h2><h4 id="一、分析网页结构"><a href="#一、分析网页结构" class="headerlink" title="一、分析网页结构"></a>一、分析网页结构</h4><p>&ensp;&ensp;&ensp;&ensp;进入到站长之家，我们可以看到免费的offer一共有426页之多，把这些全部爬下来也足够使用了吧，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/14214683-00463a04d23452c5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>我们右键检查，选中一份简历，明显可以看到进入这份简历的链接，然后点击这个链接进入到这份简历的页面里。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-c162e94900b965ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>往下翻可以看到下面有很多下载的地址，什么福建，山东，江苏，广东，厦门等，随便点击一个都可以下载的，还是右键检查一下，选中一个下载的地址，也可以看到下载的链接就在这里面。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-47490b58155b2523.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>好了，我们接下来的工作就好办了，只要把这两个链接用正则取到，在请求不就好了吗，就这么简单。</p><h4 id="二、编写python代码"><a href="#二、编写python代码" class="headerlink" title="二、编写python代码"></a>二、编写python代码</h4><p>&ensp;&ensp;&ensp;&ensp;我们先请求站长之家的链接获取到网页源代码，在用正则提取出第一个链接就好了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-769c9e4b2747b784.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>在请求这个链接，提取出下载链接，在请求下载链接就可以下载到本地了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-2e035efe08eaafda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>好了，小伙伴是不是觉得很简单，感觉python爬虫就是这样，只要找到了链接，在用正则提取就行了，思路要清晰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;自从学了python爬虫后就想去找一份爬虫的工作，但是简历如何写作是个问题，就想到了何不用爬
      
    
    </summary>
    
    
      <category term="python" scheme="https://guidozijef.github.io/tags/python/"/>
    
      <category term="spider" scheme="https://guidozijef.github.io/tags/spider/"/>
    
      <category term="resume" scheme="https://guidozijef.github.io/tags/resume/"/>
    
  </entry>
  
  <entry>
    <title>为博客添加Gitment评论系统</title>
    <link href="https://guidozijef.github.io/2018/09/06/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://guidozijef.github.io/2018/09/06/为博客添加Gitment评论系统/</id>
    <published>2018-09-06T11:12:40.482Z</published>
    <updated>2018-09-07T06:11:10.931Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&ensp;&ensp;&ensp;&ensp;一个好的博客网站，没有评论系统怎么行呢，毕竟要采纳良言，查了国内几个第三方评论系统，如：多说，友言，畅言，最终选择了Gitment，今天就教大家如何添加Gitment评论系统。</p><hr><h3 id="Gitment评论系统"><a href="#Gitment评论系统" class="headerlink" title="Gitment评论系统"></a><center>Gitment评论系统<center></center></center></h3><h3 id="一、Gitment模块"><a href="#一、Gitment模块" class="headerlink" title="一、Gitment模块"></a>一、Gitment模块</h3><p>&ensp;&ensp;&ensp;&ensp;Gitment 是基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。想了解具体效果，可以点击查看官方Demo Page：<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment Demo</a>。</p><h3 id="二、注册OAuth-Application"><a href="#二、注册OAuth-Application" class="headerlink" title="二、注册OAuth Application"></a>二、注册OAuth Application</h3><p>&ensp;&ensp;&ensp;&ensp;首先我们需要申请一个Github OAuth Application，点击<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a>进行注册，填写相关信息，<strong>注意：</strong>在Authorization callback URL填自己的网站url<code>https://guidozijef.github.io</code>，创建成功后，你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1319879-ccba8b90263f0a83.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="三、修改themes下的-config-yml文件"><a href="#三、修改themes下的-config-yml文件" class="headerlink" title="三、修改themes下的_config.yml文件"></a>三、修改<code>themes</code>下的<code>_config.yml</code>文件</h3><p>&ensp;&ensp;&ensp;&ensp;修改站点配置文件<code>_config.yml</code>，在其中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitment:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: yourid</span><br><span class="line">  repo: yourrepo</span><br><span class="line">  ClientID: yourid</span><br><span class="line">  ClientSecret: yoursecret</span><br><span class="line">  lazy: true</span><br></pre></td></tr></table></figure><p>其中的<code>client ID</code> 和 <code>client secret</code>换成你自己的就行了。<br><strong>注意：</strong>格式一定要正确，冒号后面要孔一格。</p><h3 id="四、在博客中调用Gitment"><a href="#四、在博客中调用Gitment" class="headerlink" title="四、在博客中调用Gitment"></a>四、在博客中调用Gitment</h3><p>&ensp;&ensp;&ensp;&ensp;在你需要添加评论系统的地方，一般情况下是在<code>_layout</code>目录下的 <code>_partial</code>文件或者<code>post</code> 相关的文件夹里面，吐过没有的话就自己添加一个名字叫gitment的文件，在里面写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.comment_gitment_repo %&#125;</span><br><span class="line">&lt;div id=&quot;gitmentContainer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var gitment = new Gitment(&#123;</span><br><span class="line">        id: &apos;&lt;%= page.date %&gt;&apos;,</span><br><span class="line">        owner: &apos;&#123;&#123;site.github_username&#125;&#125;&apos;,</span><br><span class="line">        repo: &apos;&#123;&#123;site.comment_gitment_repo&#125;&#125;&apos;,</span><br><span class="line">        oauth: &#123;</span><br><span class="line">            client_id: &apos;&#123;&#123;site.comment_gitment_clientId&#125;&#125;&apos;,</span><br><span class="line">            client_secret: &apos;&#123;&#123;site.comment_gitment_clientSecret&#125;&#125;&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    gitment.render(&apos;gitmentContainer&apos;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>保存就可以了。<br>以上的操作就可以看到评论系统已经成功添加了，接下来我们在把评论汉化一下，</p><h3 id="五、Gitment汉化"><a href="#五、Gitment汉化" class="headerlink" title="五、Gitment汉化"></a>五、Gitment汉化</h3><p>&ensp;&ensp;&ensp;&ensp;Gitment的汉化很简单，只需在模板文件原来定义CSS和JS的那两行改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://billts.site/extra_css/gitment.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://billts.site/js/gitment.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>就行了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180906190238162?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTk1NDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>评论之前要先登录和初始化。也可以自动初始化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;一个好的博客网站，没有评论系统怎么行呢，毕竟要采纳良言，查了国内几个第三方评论系统，如：多说
      
    
    </summary>
    
    
      <category term="Gitment" scheme="https://guidozijef.github.io/tags/Gitment/"/>
    
      <category term="hexo" scheme="https://guidozijef.github.io/tags/hexo/"/>
    
      <category term="Github" scheme="https://guidozijef.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题—自定义样式</title>
    <link href="https://guidozijef.github.io/2018/09/01/hexo%E4%B8%BB%E9%A2%98%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F/"/>
    <id>https://guidozijef.github.io/2018/09/01/hexo主题—自定义样式/</id>
    <published>2018-09-01T02:31:43.260Z</published>
    <updated>2018-09-04T03:03:24.961Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&ensp;&ensp;&ensp;&ensp;研究了一段时间终于搭建好了自己的个人博客，但选什么样的主题也正是叫人头大，中间换了好几个主题，总是感觉有的地方不是自己想要的效果，所以就跑去自己学了点前端的知识，修改了一下原有的样式。</p><hr><h2 id="HEXO主题-自定义样式"><a href="#HEXO主题-自定义样式" class="headerlink" title="HEXO主题 - 自定义样式"></a><center>HEXO主题 - 自定义样式</center></h2><h4 id="一、调试工具"><a href="#一、调试工具" class="headerlink" title="一、调试工具"></a>一、调试工具</h4><p>&ensp;&ensp;&ensp;&ensp;说到前端，就不得不提前端神器调试工具了（及开发者工具），调试工具是前端工程师常用的工具，在浏览器中右键检查或者按F12，都会弹出调试工具，这里推荐大家使用chrome浏览器和Firefox浏览器，当然其他浏览器也是一样，大家就会看到网页的原结构代码，右边就是网页样式，我们修改样式文件就是对这些文件进行修改，效果也会在这上面看见。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/2018083122425784?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTk1NDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="二、自定义样式"><a href="#二、自定义样式" class="headerlink" title="二、自定义样式"></a>二、自定义样式</h4><h5 id="审查元素"><a href="#审查元素" class="headerlink" title="审查元素"></a>审查元素</h5><p>&ensp;&ensp;&ensp;&ensp;我们可以通过审查元素或者手动点击调试工具左上角的箭头来选择你要修改的位置，调试工具就会自动找到网页源码内容，右边就会显示style样式的设置参数。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180831225132113?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTk1NDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>我们可以在右边的样式中直接双击改变参数从而测试网页的显示效果。<br><strong>注意</strong>：这个办法不是修改样式文件，一刷新样式就会消失，所以我们还需要找到，对应的样式文件。修改才行。</p><h5 id="修改样式文件"><a href="#修改样式文件" class="headerlink" title="修改样式文件"></a>修改样式文件</h5><p>&ensp;&ensp;&ensp;&ensp;我们需要找到要修改部分的样式文件，比如要修改头部的样式一般是含header字样的文件，底部的样式是footer，侧边栏是menu，文章模板是post，等（有的可能也不一样，因主题而议）。这里有两种办法可以快速修改出自己想要的样式：<br>&ensp;&ensp;&ensp;&ensp;一、找到主题原来的样式文件，直接修改里面的样式文件，这种对技术要求比较高，有的文件样式是css，less，ejs要能读懂，才能修改出自己想要的效果。<br>&ensp;&ensp;&ensp;&ensp;二、新建一个css样式，写上自己的样式在里面，再在模板文件中调用，也可以实现，也方便自己管理，也不会干涉以前的样式，调用自己的样式文件，之前的样式文件就会被覆盖，如果有的个别没被覆盖的话，可以在属性后面加上！important，提高权重。这种方法需要会HTML、CSS、甚至JavaScrip。前两个会的话也能修改大部分样式了。<br>&ensp;&ensp;&ensp;&ensp;下面看看我写的一部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../source/js/set_root.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">    .im&#123;</span><br><span class="line">        width: 415px;</span><br><span class="line">        height: 230px;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .rigth &#123;</span><br><span class="line">        width: 710px;</span><br><span class="line">        /* height: 257px; */</span><br><span class="line">        padding-top: 20px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .container &#123;</span><br><span class="line">        margin: 0 116px;</span><br><span class="line">        width: 1126px;</span><br><span class="line">    &#125;</span><br><span class="line">    .post-list-item &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        width: 1126px;</span><br><span class="line">        padding: 0px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- partial(&apos;_partial/header&apos;, &#123;</span><br><span class="line">    title: config.title,</span><br><span class="line">    hdClass: &apos;index-header&apos;</span><br><span class="line">&#125;) %&gt;</span><br><span class="line">&lt;div class=&quot;container body-wrap&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul class=&quot;post-list&quot;&gt;</span><br><span class="line">    &lt;% page.posts.each(function(post)&#123; %&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;li class=&quot;post-list-item fade&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;im&quot;&gt;</span><br><span class="line">                &lt;!-- &lt;img src=&quot;https://guidozijef.github.io/img/cover.jpg&quot; alt=&quot;图片&quot;&gt; --&gt;</span><br><span class="line">                &lt;%- image_tag(post.cover || theme.cover, &#123;class: &quot;cover&quot;&#125;) %&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;rigth&quot;&gt;</span><br><span class="line">                &lt;%- partial(&apos;_partial/index-item&apos;, &#123;</span><br><span class="line">                post: post,</span><br><span class="line">                index: true</span><br><span class="line">            &#125;) %&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;% &#125;) %&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%- partial(&apos;_partial/paginator&apos;) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这里面的<code>&lt;style&gt;</code>标签里面的内容就是我写的，修改了很多的样式，我用的是内嵌式，正常开放过程中一般是外联式，这里在教大家一招果看到那个网站那个模块不错的话，可以直接用调试工具，把他当内容和样式内容全部拷贝下来，在写入适当的文件中就行了，这里面的接用调试工具，标签里面的内容就是我写的，修改了很多的样式，这里在教大家一招，如果看到那个网站那个模块不错的话，可以直接用调试工具，把他当内容和样式内容全部拷贝下来，在写入适当的文件中就行了。<br><strong>注意</strong>：其实最重要的就是要找到你的主题中那一个文件是控制那一部分样式的，而文件的命名大多数都是那几个专属名字，不知道可以百度，一般文件是在<code>layout</code>文件夹下面，比如我的，F:hexo\themes\indigo\layout，只需要修改这里面的文件的内容就可以了，一般内容不用动，只增加样式就行了，他会覆盖之前的样式。<br>最后大家看看我修改的效果<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180831234012934?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTk1NDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="之前的" title="">                </div>                <div class="image-caption">之前的</div>            </figure><br>修改之后，我加了背景和文章图片，下面还修改了底部样式。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180831234159477?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTk1NDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="修改后" title="">                </div>                <div class="image-caption">修改后</div>            </figure><br>觉得行的话，可以支持一下哟。谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;研究了一段时间终于搭建好了自己的个人博客，但选什么样的主题也正是叫人头大，中间换了好几个主题
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://guidozijef.github.io/tags/hexo/"/>
    
      <category term="css" scheme="https://guidozijef.github.io/tags/css/"/>
    
      <category term="html" scheme="https://guidozijef.github.io/tags/html/"/>
    
      <category term="indigo" scheme="https://guidozijef.github.io/tags/indigo/"/>
    
      <category term="ejs" scheme="https://guidozijef.github.io/tags/ejs/"/>
    
  </entry>
  
  <entry>
    <title>python爬取爱情公寓电影评论并制作词云</title>
    <link href="https://guidozijef.github.io/2018/08/14/python%E7%88%AC%E5%8F%96%E7%88%B1%E6%83%85%E5%85%AC%E5%AF%93%E7%94%B5%E5%BD%B1%E8%AF%84%E8%AE%BA%E5%B9%B6%E5%88%B6%E4%BD%9C%E8%AF%8D%E4%BA%91/"/>
    <id>https://guidozijef.github.io/2018/08/14/python爬取爱情公寓电影评论并制作词云/</id>
    <published>2018-08-13T16:44:57.481Z</published>
    <updated>2018-09-04T03:07:30.121Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><p>&ensp;&ensp;&ensp;&ensp;一直想研究研究如何生成词云，今天抽点时间给大家分享一下制作词云的过程，本文重在研究词云如何制作，由于时间仓促，至于爬取的数据量不大，大家可自行爬取其他数据。</p><hr><h2 id="python爬取爱情公寓电影评论并制作词云"><a href="#python爬取爱情公寓电影评论并制作词云" class="headerlink" title="python爬取爱情公寓电影评论并制作词云"></a><center>python爬取爱情公寓电影评论并制作词云</center></h2><h4 id="爬取爱情公寓电影评论"><a href="#爬取爱情公寓电影评论" class="headerlink" title="爬取爱情公寓电影评论"></a>爬取爱情公寓电影评论</h4><p>&ensp;&ensp;&ensp;&ensp;因为主要是练习词云，所有我就顺便百度了一下爱情公寓，就出来了，链接如下：<a href="http://v.baidu.com/movie/134804.htm?fr=open_bdps_dyyg" target="_blank" rel="noopener">http://v.baidu.com/movie/134804.htm?fr=open_bdps_dyyg</a>，大家可自行换其他网站爬取评论，数据量最好大一点，才有价值。也可以当一个爬虫进行练习，里面也还是有一些坑的，我们直接进去网站，到下直接就看到评论了，总共只有240条，我们按照常规套路右键检查，直接选取元素，点选评论，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180813235308298?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTk1NDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><br>直接看到结果了，然后一如既往的把上面的url拿下来，直接一波requests.get请求，结果一看源代码，根本就没有任何关于评论的数据。这样我们就怀疑是不是ajxs动态加载的，我们选到network，再选到xhr中，仔细观察，会发现评论数据藏在一个list开头的js文件中，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180814000025636?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTk1NDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><br>再点到hesder回去看一下，url其实并不上上面的那个，还是发送的get请求，这样就好办了，我们直接在js文件中提取comment数据就行了，直接上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def get_page(self, url):</span><br><span class="line">        response = requests.get(url, headers=self.headers)</span><br><span class="line">        response.encoding = &quot;utf-8&quot;</span><br><span class="line">        # 注意下面两行代码在处理过程中容易多去花括号或者少去花括号，都会造成json格式报错，一定要注意</span><br><span class="line">        data = response.text.split(&apos;(&apos;, 1)[1]  # 根据（进行切片一次处理，取第二部分</span><br><span class="line">        data = data[0:len(data) - 1]  # 然后去掉后面的）和；</span><br><span class="line">        items = json.loads(data)</span><br><span class="line">        for i in range(len(items[&apos;data&apos;][&apos;data&apos;])):</span><br><span class="line">            item = items[&apos;data&apos;][&apos;data&apos;][i][&apos;content&apos;]</span><br><span class="line">            # print(item)</span><br><span class="line">            self.info_list.append(item)</span><br></pre></td></tr></table></figure><p><strong>在这里面要注意一下几点：</strong></p><ol><li>我们获取的网页源代码，其实不是标准的网页源代码，前面会有一些多余的‘fetchJSON_comment98vv56725(’；这样的。</li><li>后面也会多余一个，</li><li>我们再去掉这些多余的符号的时候，一定要小心，千万不要多去，或者少去，<strong>都会导致后面的json数据提取不出来</strong>。（这里推荐大家把源代码复制下来，然后用json格式在线解析，就一目了然了。）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">items = json.loads(data)</span><br></pre></td></tr></table></figure><p>json.loads 是将字符串格式转化为json数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in range(len(items[&apos;data&apos;][&apos;data&apos;]))：</span><br></pre></td></tr></table></figure><p>len(items[‘data’][‘data’])是用来动态计算每一页有多少个评论。<br>这里结果我用了一个列表把数据装了起来，在调一个写入的方法将数据写入到本地TXT文件就行了。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def write(self, info):</span><br><span class="line">        with open(&apos;comment.txt&apos;, &apos;a&apos;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">            f.write(info + &quot;\n&quot;)</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><p>最后代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import jieba</span><br><span class="line">from scipy.misc import imread</span><br><span class="line">from wordcloud import WordCloud, ImageColorGenerator</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Aiqing(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            &apos;User-Agent&apos;:</span><br><span class="line">            &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        self.info_list = []</span><br><span class="line"></span><br><span class="line">    def get_page(self, url):</span><br><span class="line">        response = requests.get(url, headers=self.headers)</span><br><span class="line">        response.encoding = &quot;utf-8&quot;</span><br><span class="line">        # 注意下面两行代码在处理过程中容易多去花括号或者少去花括号，都会造成json格式报错，一定要注意</span><br><span class="line">        data = response.text.split(&apos;(&apos;, 1)[1]  # 根据（进行切片一次处理，取第二部分</span><br><span class="line">        data = data[0:len(data) - 1]  # 然后去掉后面的）和；</span><br><span class="line">        items = json.loads(data)</span><br><span class="line">        for i in range(len(items[&apos;data&apos;][&apos;data&apos;])):</span><br><span class="line">            item = items[&apos;data&apos;][&apos;data&apos;][i][&apos;content&apos;]</span><br><span class="line">            # print(item)</span><br><span class="line">            self.info_list.append(item)</span><br><span class="line"></span><br><span class="line">    def write(self, info):</span><br><span class="line">        with open(&apos;comment.txt&apos;, &apos;a&apos;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">            f.write(info + &quot;\n&quot;)</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line">    def main(self):</span><br><span class="line">        for page in range(1, 19):</span><br><span class="line">            if page == 1:</span><br><span class="line">                url = &apos;http://v.baidu.com/uc/comment/list?callback=jQuery111108169115031412963_1534155539196&amp;page=1&amp;workstype=movie&amp;works_id=134804&amp;_=1534155539197&apos;</span><br><span class="line">            elif page &lt; 3:</span><br><span class="line">                url = &apos;http://v.baidu.com/uc/comment/list?callback=jQuery111108169115031412963_1534155539180&amp;page=&#123;&#125;&amp;workstype=movie&amp;works_id=134804&amp;_=153415553920&#123;&#125;&apos;.format(</span><br><span class="line">                    page, page + 6)</span><br><span class="line">            else:</span><br><span class="line">                url = &apos;http://v.baidu.com/uc/comment/list?callback=jQuery111108169115031412963_1534155539180&amp;page=&#123;&#125;&amp;workstype=movie&amp;works_id=134804&amp;_=15341555392&#123;&#125;&apos;.format(</span><br><span class="line">                    page, page + 6)</span><br><span class="line">            self.get_page(url)</span><br><span class="line">        for info in self.info_list:</span><br><span class="line">            self.write(info)</span><br><span class="line">        self.ciyun()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    aiqing = Aiqing()</span><br><span class="line">    aiqing.main()</span><br></pre></td></tr></table></figure><p>这里还有要说的就是，上面的我们找的list那个文件，只是一页的评论数据，第二页要点击。加载更多，然后会出现后面的list文件，但是会发现，第一个跟后面的url不一样，也没有什么规律，所以我加了一个判断， 至于第2也到第4为什么也有，那是因为我没看到好的表示page的办法，所有就这样写了，大家有什么好办法也可以提出来。</p><h4 id="利用数据制作词云"><a href="#利用数据制作词云" class="headerlink" title="利用数据制作词云"></a>利用数据制作词云</h4><p>&ensp;&ensp;&ensp;&ensp;制作词云我们先找一个图片，用作词云的外形，然后就是代码了，我么写的是类，可能没必要，但是大家还是要养成一个好的习惯，而且感觉写类方法，很简单明了，我直接加两个词云方法就行了，也不会影响其他代码。直接上代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def word_cloud(self, text):</span><br><span class="line">    words_list = []</span><br><span class="line">    word_generator = jieba.cut(text, cut_all=False)  # 返回的是一个迭代器</span><br><span class="line">    for word in word_generator:</span><br><span class="line">        if len(word) &gt; 1:  # 去掉单字</span><br><span class="line">             words_list.append(word)</span><br><span class="line">    return &apos; &apos;.join(words_list)</span><br><span class="line"></span><br><span class="line">   def ciyun(self):</span><br><span class="line">       back_color = imread(&apos;fengche.png&apos;)  # 解析该图片</span><br><span class="line">       wc = WordCloud(</span><br><span class="line">           background_color=&apos;white&apos;,  # 背景颜色</span><br><span class="line">           max_words=500,  # 最大词数</span><br><span class="line">           mask=back_color,  # 以该参数值作图绘制词云，这个参数不为空时，width和height会被忽略</span><br><span class="line">           max_font_size=50,  # 显示字体的最大值</span><br><span class="line">           font_path=&quot;C:\Windows\Fonts\ygyxsziti2.0.ttf&quot;,  # 找到本地字体文件，或者下载字体文件</span><br><span class="line">           random_state=10,  # 为每个词返回一个PIL颜色</span><br><span class="line">           scale=15,  # 默认值1。值越大，图像密度越大越清晰</span><br><span class="line">           # width=1000,  # 图片的宽</span><br><span class="line">           # height=860  # 图片的长</span><br><span class="line">       )</span><br><span class="line">       # 打开保存的评论数据</span><br><span class="line">       text = open(&apos;comment.txt&apos;, encoding=&quot;utf-8&quot;).read()</span><br><span class="line">       text = self.word_cloud(text)</span><br><span class="line">       wc.generate(text)</span><br><span class="line">       # 基于彩色图像生成相应彩色</span><br><span class="line">       image_colors = ImageColorGenerator(back_color)</span><br><span class="line">       # 显示图片</span><br><span class="line">       plt.imshow(wc)</span><br><span class="line">       # 关闭坐标轴</span><br><span class="line">       plt.axis(&apos;off&apos;)</span><br><span class="line">       # 绘制词云</span><br><span class="line">       plt.figure()</span><br><span class="line">       plt.imshow(wc.recolor(color_func=image_colors))</span><br><span class="line">       plt.axis(&apos;off&apos;)</span><br><span class="line">       # 保存图片</span><br><span class="line">       wc.to_file(&apos;apple.jpg&apos;)</span><br><span class="line">       print(&apos;comment.png has bee saved!&apos;)</span><br></pre></td></tr></table></figure><p>这里大家需要安装两个库wordcloud、scipy和jieba安装方式直接（pip install 模块名），wordcloud是用来制作词云的，scipy.misc方法用来解析图片，jieba是用来切词的，我们需要将评论切分成词，我写的一个word_cloud（）函数是用来切词的，WordCloud函数参数又很多，基本用到我的这些也就够了，我代码后面的注释也很详细，关于详细的如何设置，大家可以参看<a href="https://www.cnblogs.com/zongfa/p/8834585.html" target="_blank" rel="noopener">jieba+wordcloud</a>，<br>这里有可能会存在编码格式的问题，大家如果在写入文件的时候设置的编码格式是utf-8的话，那么在写词云打开这个文本的时候也用utf-8编码，就不会存在编码格式的问题了，其他就没什么问题了，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/2018081400405734?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTk1NDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><br>我就随便弄了一个词云，大家可以找好看的图片，自己弄就行了。最后奉上全部代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"># -*- conding=UTF-8 -*-</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import jieba</span><br><span class="line">from scipy.misc import imread</span><br><span class="line">from wordcloud import WordCloud, ImageColorGenerator</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Aiqing(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            &apos;User-Agent&apos;:</span><br><span class="line">            &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        self.info_list = []</span><br><span class="line"></span><br><span class="line">    def get_page(self, url):</span><br><span class="line">        response = requests.get(url, headers=self.headers)</span><br><span class="line">        response.encoding = &quot;utf-8&quot;</span><br><span class="line">        # 注意下面两行代码在处理过程中容易多去花括号或者少去花括号，都会造成json格式报错，一定要注意</span><br><span class="line">        data = response.text.split(&apos;(&apos;, 1)[1]  # 根据（进行切片一次处理，取第二部分</span><br><span class="line">        data = data[0:len(data) - 1]  # 然后去掉后面的）和；</span><br><span class="line">        items = json.loads(data)</span><br><span class="line">        for i in range(len(items[&apos;data&apos;][&apos;data&apos;])):</span><br><span class="line">            item = items[&apos;data&apos;][&apos;data&apos;][i][&apos;content&apos;]</span><br><span class="line">            # print(item)</span><br><span class="line">            self.info_list.append(item)</span><br><span class="line"></span><br><span class="line">    def write(self, info):</span><br><span class="line">        with open(&apos;comment.txt&apos;, &apos;a&apos;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">            f.write(info + &quot;\n&quot;)</span><br><span class="line">            f.close()</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">绘制词云部分</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">    def word_cloud(self, text):</span><br><span class="line">        words_list = []</span><br><span class="line">        word_generator = jieba.cut(text, cut_all=False)  # 返回的是一个迭代器</span><br><span class="line">        for word in word_generator:</span><br><span class="line">            if len(word) &gt; 1:  # 去掉单字</span><br><span class="line">                words_list.append(word)</span><br><span class="line">        return &apos; &apos;.join(words_list)</span><br><span class="line"></span><br><span class="line">    def ciyun(self):</span><br><span class="line">        back_color = imread(&apos;fengche.png&apos;)  # 解析该图片</span><br><span class="line">        wc = WordCloud(</span><br><span class="line">            background_color=&apos;white&apos;,  # 背景颜色</span><br><span class="line">            max_words=500,  # 最大词数</span><br><span class="line">            mask=back_color,  # 以该参数值作图绘制词云，这个参数不为空时，width和height会被忽略</span><br><span class="line">            max_font_size=50,  # 显示字体的最大值</span><br><span class="line">            font_path=&quot;C:\Windows\Fonts\ygyxsziti2.0.ttf&quot;,  # 找到本地字体文件，或者下载字体文件</span><br><span class="line">            random_state=10,  # 为每个词返回一个PIL颜色</span><br><span class="line">            scale=15,  # 默认值1。值越大，图像密度越大越清晰</span><br><span class="line">            # width=1000,  # 图片的宽</span><br><span class="line">            # height=860  # 图片的长</span><br><span class="line">        )</span><br><span class="line">        # 打开保存的评论数据</span><br><span class="line">        text = open(&apos;comment.txt&apos;, encoding=&quot;utf-8&quot;).read()</span><br><span class="line">        text = self.word_cloud(text)</span><br><span class="line">        wc.generate(text)</span><br><span class="line">        # 基于彩色图像生成相应彩色</span><br><span class="line">        image_colors = ImageColorGenerator(back_color)</span><br><span class="line">        # 显示图片</span><br><span class="line">        plt.imshow(wc)</span><br><span class="line">        # 关闭坐标轴</span><br><span class="line">        plt.axis(&apos;off&apos;)</span><br><span class="line">        # 绘制词云</span><br><span class="line">        plt.figure()</span><br><span class="line">        plt.imshow(wc.recolor(color_func=image_colors))</span><br><span class="line">        plt.axis(&apos;off&apos;)</span><br><span class="line">        # 保存图片</span><br><span class="line">        wc.to_file(&apos;apple.jpg&apos;)</span><br><span class="line">        print(&apos;comment.png has bee saved!&apos;)</span><br><span class="line"></span><br><span class="line">    def main(self):</span><br><span class="line">        for page in range(1, 19):</span><br><span class="line">            if page == 1:</span><br><span class="line">                url = &apos;http://v.baidu.com/uc/comment/list?callback=jQuery111108169115031412963_1534155539196&amp;page=1&amp;workstype=movie&amp;works_id=134804&amp;_=1534155539197&apos;</span><br><span class="line">            elif page &lt; 3:</span><br><span class="line">                url = &apos;http://v.baidu.com/uc/comment/list?callback=jQuery111108169115031412963_1534155539180&amp;page=&#123;&#125;&amp;workstype=movie&amp;works_id=134804&amp;_=153415553920&#123;&#125;&apos;.format(</span><br><span class="line">                    page, page + 6)</span><br><span class="line">            else:</span><br><span class="line">                url = &apos;http://v.baidu.com/uc/comment/list?callback=jQuery111108169115031412963_1534155539180&amp;page=&#123;&#125;&amp;workstype=movie&amp;works_id=134804&amp;_=15341555392&#123;&#125;&apos;.format(</span><br><span class="line">                    page, page + 6)</span><br><span class="line">            self.get_page(url)</span><br><span class="line">        for info in self.info_list:</span><br><span class="line">            self.write(info)</span><br><span class="line">        self.ciyun()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    aiqing = Aiqing()</span><br><span class="line">    aiqing.main()</span><br></pre></td></tr></table></figure><p>谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h5&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;一直想研究研究如何生成词云，今天抽点时间给大家分享一下制作词云的过程，本文重在研究词
      
    
    </summary>
    
    
      <category term="python" scheme="https://guidozijef.github.io/tags/python/"/>
    
      <category term="词云" scheme="https://guidozijef.github.io/tags/%E8%AF%8D%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客，hexo+github搭建个人博客</title>
    <link href="https://guidozijef.github.io/2018/08/08/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%EF%BC%8Chexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://guidozijef.github.io/2018/08/08/第一篇博客，hexo+github搭建个人博客/</id>
    <published>2018-08-08T13:51:48.298Z</published>
    <updated>2018-10-01T09:44:07.043Z</updated>
    
    <content type="html"><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>&ensp;&ensp;&ensp;&ensp;经过一个晚上的艰苦卓绝，我的个人博客也终于搭建成功，第一篇博客还是把我搭建博客的过程给大家讲一下，避免大家踩坑。</p><hr><h2 id="hexo-github搭建个人博客"><a href="#hexo-github搭建个人博客" class="headerlink" title="hexo+github搭建个人博客"></a><center>hexo+github搭建个人博客<center></center></center></h2><h2 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h2><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>&ensp;&ensp;&ensp;&ensp;以Windows环境安装node.js为例，首先登录<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>官网，选择适合自己的版本进行下载，然后进行安装。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/14214683-9778eeed032c57c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="node下载" title="">                </div>                <div class="image-caption">node下载</div>            </figure><br>测试安装：命令行使用node -v 、mpm -v，查看显示版本号即成功。</p><h4 id="安装git客户端"><a href="#安装git客户端" class="headerlink" title="安装git客户端"></a>安装git客户端</h4><p>&ensp;&ensp;&ensp;&ensp;<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>是目前世界上最流行的分布式版本控制系统，没有之一。使用Git可以帮助我们把本地的网页和文章等内容提交到<a href="https://github.com/" target="_blank" rel="noopener">Github</a>上，实现同步。<br><strong>注意</strong>：安装过程中，注意勾选在右键菜单建立git bash快捷方式一项，因为之后的各种操作都需要在git bash中用命令行进行操作，方便随时随地打开命令窗口。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/14214683-2b52a5951277dfc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git" title="">                </div>                <div class="image-caption">git</div>            </figure></p><h4 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h4><p>&ensp;&ensp;&ensp;&ensp;<a href="https://github.com/" target="_blank" rel="noopener">Github</a>是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。这里用到Github，是因为我们需要通过Github得到自己的博客网站域名，而且需要使用gitHub同步我们个人博客的相关文件。<br>&ensp;&ensp;&ensp;&ensp;注册地址：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a><br>&ensp;&ensp;&ensp;&ensp;注册流程：<a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a>，百度一下，你就知道啦<br><strong>注意</strong>：注册Github的时候一定要选择一个合适的名字，因为后来博客网站的域名也会用到这个名字(除非使用域名)。虽然Github用户名支持后期修改，但是还是会带来很多不必要的麻烦。github的使用在网上有很多教程，这里也就不再累述了。</p><h2 id="二、开始搭建博客"><a href="#二、开始搭建博客" class="headerlink" title="二、开始搭建博客"></a>二、开始搭建博客</h2><h4 id="开启GitHub-Pages服务"><a href="#开启GitHub-Pages服务" class="headerlink" title="开启GitHub Pages服务"></a>开启GitHub Pages服务</h4><p>&ensp;&ensp;&ensp;&ensp;搭建我们的个人博客需要一个唯一的域名，当然我们可以申请购买一个域名来使用，但是在不是太必要的情况下，我们也可以通过Github Pages获得一个免费使用的域名，这需要我们在Github上新建一个仓库，如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-7f360f231ba1a029.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>&ensp;&ensp;&ensp;&ensp;我这里报错是因为我已经有这个仓库名了，大家正常取名字就行了。</p><p>&ensp;&ensp;&ensp;&ensp;这个过程和建立普通的仓库没什么区别，关键在于新仓库的名字，一定要是UserName+“github.io”比如我的现在就是：<a href="https://guidozijef.github.io">https://guidozijef.github.io</a>的形式。这也是之前强调的要起一个好的用户名的原因。这样之后我们最后的博客网站的链接就会是：<a href="https://UserName.github.io" target="_blank" rel="noopener">https://UserName.github.io</a>的形式。<br><strong>注意</strong>：固定新仓库的名字格式并非必须，只是这样操作生成的博客域名比较短小简洁，另起他名生成博客域名会很冗长。</p><p>点击Create Repository之后，随后选择Setting进入设置，找到Github Pages如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1244124-5e0f79282ae8140c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>这里我们需要点击Choose a theme任意选择一个选择主题，然后界面会跳转到仓库，我们看到有两个文件如下：<br><img src="http://upload-images.jianshu.io/upload_images/1244124-75e5fceb23b7b85a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt=""><br>  此时若再查看setting，我们会看到开启GitHub Pages之后得到的域名如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-ed390b55baa05c13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>现在，我们就可以使用<a href="https://UserName.github.io" target="_blank" rel="noopener">https://UserName.github.io</a>，访问自己的博客网站了，打开链接我们会看到默认主题的个人博客样式如下(我已经换了主题，为了更好的教程效果，就借一张图吧)：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1244124-e1b205aeaf1442b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="安装及初始化Hexo"><a href="#安装及初始化Hexo" class="headerlink" title="安装及初始化Hexo"></a>安装及初始化Hexo</h4><p>&ensp;&ensp;&ensp;&ensp;在电脑任意空白处点击右键，选择Git Bash Here打开命令行，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>&ensp;&ensp;&ensp;&ensp;<strong>注意</strong>：这里的命令行和下面所指的命令行指的都是右键Git Bash Here中输入，而不是cmd中。<br>&ensp;&ensp;&ensp;&ensp;等一小会，安装完成后再输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></p><p>&ensp;&ensp;&ensp;&ensp;如果显示版本号，就说明安装hexo成功了。<br>&ensp;&ensp;&ensp;&ensp;安装完成之后，就可以选择一个自己的文件夹作为博客的根目录( 例如 C:\blog ),然后在该目录下打开命令行，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><p>&ensp;&ensp;&ensp;&ensp;初始化hexo，会在刚才初始化的文件夹下面生成一些文件，这些就是配置主题的文件了。后期，我们修改主题，写博客都会在这里面操作，结构目录如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/14214683-af385c3ba87025e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><br>下面来测试本地博客站点，在本地博客根目录下使用控制台命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>此时打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，我们将会看到Hexo自带默认主题显示的博客样式如下(呃，是好看了那么一点点)：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/1244124-3e96fc83cdb07011.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="将Hexo与Github-page联系起来"><a href="#将Hexo与Github-page联系起来" class="headerlink" title="将Hexo与Github page联系起来"></a>将Hexo与Github page联系起来</h4><p>&ensp;&ensp;&ensp;&ensp;将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话），在刚才的文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-bc679e0d35ba05cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>输入cd ~/.ssh，检查是否由.ssh的文件夹<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-e3897e1a0f8cb534.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>输入ls，列出该文件下的内容。下图说明存在<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-18f89197f18e8e8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p> 输入ssh-keygen -t rsa -C “<a href="mailto:913497146@qq.com" target="_blank" rel="noopener">913497146@qq.com</a>“，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。<br> 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-b581e23d4872f4b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-345406844cc3b2bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p> 登录Github，点击头像下的settings，添加ssh<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/14214683-f23e2f267fa78d1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><br>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去。<br>输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-e0d58d035fe5b41c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="同步Github-允许公共访问"><a href="#同步Github-允许公共访问" class="headerlink" title="同步Github,允许公共访问"></a>同步Github,允许公共访问</h4><p>&ensp;&ensp;&ensp;&ensp;在本地我们已经搭建了博客，但是还只能自己本地访问。若要别人也能看到，那就需要我们将其同步部署到GitHub上了。还记得我们之前准备的Github仓库吗，这里就要用到了。<br>&ensp;&ensp;&ensp;&ensp;首先找到我们的博客仓库，并拷贝仓库地址：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-295ac21d493a6309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>注意</strong>：这里的仓库名字一定要是git的，而不是https，不然后面会失败。如果不是git的请点击箭头所指的文字。</p><p>然后修改本地博客目录的配置：<br>修改本次博客根目录下的_config.yml文件，修改deploy下的配置如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-46d62af3ed63895d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>最后执行控制台命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>现在，我们再次访问链接：<a href="https://userName.github.io" target="_blank" rel="noopener">https://userName.github.io</a>，就会发现这里的界面和本地的一样了。如此一来我们搭建的个人博客网站就基本完成了。 </p><h2 id="三、发布博客"><a href="#三、发布博客" class="headerlink" title="三、发布博客"></a>三、发布博客</h2><p>&ensp;&ensp;&ensp;&ensp;新建一篇博客，在git bash中执行命令：hexo new post “博客名”<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-ca2400bc2b19cc22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>创建的文件<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/14214683-61496cf95897f6bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>再输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章了。</p><p>&ensp;&ensp;&ensp;&ensp;好了，我们的个人博客网站就已经建立成功了，关于如何写博客，大家可以直接在<strong>-posts</strong>文件夹中新建<strong>.md</strong>文件，然后再在命令行输入hexo g，hexo d，部署到github上面即可。再给大家推荐一个hexo主题网站，可以在上面选择下载各位心意的主题了<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>。下载后更改文件<strong>_config.yml</strong>下的<strong>theme</strong>，改成直接下载的主题名，关于hexo主题的优化，就不给大家过多的讲解了，因为大家主题各有不同，感兴趣的可自可行研究。</p><p>&ensp;&ensp;&ensp;&ensp;最后欢迎大家加入学习交流群IT-峰会：812307816，共图霸业。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h6&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;经过一个晚上的艰苦卓绝，我的个人博客也终于搭建成功，第一篇博客还是把我搭建博客的过程给大家讲
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://guidozijef.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://guidozijef.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>python使用lxwt模块操作Excel文件</title>
    <link href="https://guidozijef.github.io/2018/08/08/python%E4%BD%BF%E7%94%A8lxwt%E6%A8%A1%E5%9D%97%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6/"/>
    <id>https://guidozijef.github.io/2018/08/08/python使用lxwt模块操作Excel文件/</id>
    <published>2018-08-07T16:47:26.000Z</published>
    <updated>2018-08-10T14:26:26.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python使用lxwt模块操作Excel文件"><a href="#python使用lxwt模块操作Excel文件" class="headerlink" title="python使用lxwt模块操作Excel文件"></a><center>python使用lxwt模块操作Excel文件<center></center></center></h2><p>&ensp;&ensp;&ensp;&ensp;很多从网上爬取的数据很多都需要写入excel表或者数据库保存起来，这里就给大家简单讲解下如何运用python中的lxwt模块将数据写入excel表中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># 导入lxwt模块，还没安装的直接在终端输入pip install lxwt即可。</span><br><span class="line"></span><br><span class="line">import lxwt</span><br><span class="line"></span><br><span class="line"># 新建一个excel文件</span><br><span class="line"></span><br><span class="line">file = xlwt.Workbook() # 注意这里的Workbook首字母是大写</span><br><span class="line"></span><br><span class="line"># 新建一个sheet，这里是新建excel工作表，如果数据循环写入一定不要把这行代码写入循环之内，不然会只写入最后一个数据，切记。</span><br><span class="line"></span><br><span class="line">table = file.add_sheet(&apos;sheet name&apos;)</span><br><span class="line"></span><br><span class="line"># 写入数据table.write(行,列,value)</span><br><span class="line"></span><br><span class="line">table.write(0,0,&apos;test&apos;)# 循环写入，直接循环这三个数字就可以了（行、列、数据）</span><br><span class="line"></span><br><span class="line"># 如果对一个单元格重复操作，会引发下面错误。</span><br><span class="line"></span><br><span class="line">returns error:</span><br><span class="line">　　　# Exception: Attempt to overwrite cell:</span><br><span class="line">　　　# sheetname=u&apos;sheet 1&apos; rowx=0 colx=0</span><br><span class="line">　　  # 所以在打开时加cell_overwrite_ok=True 解决</span><br><span class="line"></span><br><span class="line">table = file.add_sheet(&apos;sheet name&apos;,cell_overwrite_ok=True )</span><br><span class="line"></span><br><span class="line">file.save(&apos;demo.xls&apos;)  # 保存文件，保存该excel文件,有同名文件时直接覆盖</span><br><span class="line"></span><br><span class="line">到此数据就能写入excel中了，下面在介绍一些其他操作。</span><br><span class="line"></span><br><span class="line">使用style</span><br><span class="line"></span><br><span class="line">style = xlwt.XFStyle() # 初始化样式</span><br><span class="line"></span><br><span class="line">font = xlwt.Font() #为样式创建字体</span><br><span class="line"></span><br><span class="line">font.name = &apos;Times New Roman&apos;</span><br><span class="line"></span><br><span class="line">font.bold = True</span><br><span class="line"></span><br><span class="line">style.font = font #为样式设置字体</span><br><span class="line"></span><br><span class="line">table.write(0, 0, &apos;some bold Times text&apos;, style) # 使用样式</span><br><span class="line"></span><br><span class="line">xlwt 允许单元格或者整行地设置格式。还可以添加链接以及公式。可以阅读源代码，那里有例子：</span><br><span class="line"></span><br><span class="line">dates.py, 展示如何设置不同的数据格式</span><br><span class="line"></span><br><span class="line">hyperlinks.py, 展示如何创建超链接 (hint: you need to use a formula)</span><br><span class="line"></span><br><span class="line">merged.py, 展示如何合并格子</span><br><span class="line"></span><br><span class="line">row_styles.py, 展示如何应用Style到整行格子中.</span><br></pre></td></tr></table></figure><p>接下来给大家一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import xlwt</span><br><span class="line"></span><br><span class="line"># 指定file以utf-8的格式打开</span><br><span class="line">file = xlwt.Workbook(encoding=&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line"># 指定打开的文件名</span><br><span class="line">table = file.add_sheet(&apos;Sheet 1&apos;, cell_overwrite_ok=True)</span><br><span class="line"></span><br><span class="line">info_list = [</span><br><span class="line">    [&apos;张三&apos;, &apos;150&apos;, &apos;120&apos;, &apos;100&apos;],</span><br><span class="line">    [&apos;李四&apos;, &apos;90&apos;, &apos;99&apos;, &apos;95&apos;],</span><br><span class="line">    [&apos;王五&apos;, &apos;60&apos;, &apos;66&apos;, &apos;68&apos;],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">for i, p in enumerate(info_list):</span><br><span class="line">    # 将数据写入文件,i是enumerate()函数返回的序号数</span><br><span class="line">    for j, q in enumerate(p):</span><br><span class="line">        # print(i, j, q)</span><br><span class="line">        table.write(i, j, q)</span><br><span class="line"></span><br><span class="line">file.save(&apos;data.xls&apos;)</span><br></pre></td></tr></table></figure><p>大家在写入数据的过程中可能会存在每个人的数据类型可能都不一样，有的是列表数据，有的还是字典类型，不管什么类型的数据，大家一定要清楚table.write（I，J，Q ）中的三个数据，分别对应练成表中的行，列还有要写入的数据，只要这三个序号搞清楚了就没问题了，还有要给大家提的就是enumerate（），</p><h4 id="enumerate（）函数："><a href="#enumerate（）函数：" class="headerlink" title="enumerate（）函数："></a>enumerate（）函数：</h4><p>enumerate（）是python的内置函数，适用于python2.x和python3.x<br>enumerate在字典上是枚举、列举的意思<br>enumerate参数为可遍历/可迭代的对象（如列表，字符串）<br>enumerate多用于在对于循环中得到计数，利用它可以同时获得索引和值，即需要索引和值值的时候可以使用</p><p>同样给大家举个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list = [1,2,3,4,5,6]</span><br><span class="line">for index,value in enumerate(list):</span><br><span class="line">    print (index,value)</span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line"></span><br><span class="line">0,1</span><br><span class="line">1,2</span><br><span class="line">2,3</span><br><span class="line">3,4</span><br><span class="line">4,5</span><br><span class="line">5,6</span><br></pre></td></tr></table></figure><p>index是enumerate（）函数自己生成的计数，我们再向enumerate（）函数后加一个参数，看看效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list = [1,2,3,4,5,6]</span><br><span class="line">for index,value in enumerate(list,3):</span><br><span class="line">    print (index,value)</span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line"></span><br><span class="line">3,1</span><br><span class="line">4,2</span><br><span class="line">5,3</span><br><span class="line">6,4</span><br><span class="line">7,5</span><br><span class="line">8,6</span><br></pre></td></tr></table></figure><p>加一个参数就决定了从哪里开始索引。</p><p>好了lxwt模块，就介绍到这里了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python使用lxwt模块操作Excel文件&quot;&gt;&lt;a href=&quot;#python使用lxwt模块操作Excel文件&quot; class=&quot;headerlink&quot; title=&quot;python使用lxwt模块操作Excel文件&quot;&gt;&lt;/a&gt;&lt;center&gt;python使用l
      
    
    </summary>
    
    
      <category term="excel" scheme="https://guidozijef.github.io/tags/excel/"/>
    
      <category term="python" scheme="https://guidozijef.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://guidozijef.github.io/2018/08/07/hello-world/"/>
    <id>https://guidozijef.github.io/2018/08/07/hello-world/</id>
    <published>2018-08-07T14:12:38.862Z</published>
    <updated>2018-08-17T06:32:01.283Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="python" scheme="https://guidozijef.github.io/tags/python/"/>
    
      <category term="hello world" scheme="https://guidozijef.github.io/tags/hello-world/"/>
    
  </entry>
  
</feed>
